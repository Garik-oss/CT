#include <iostream>
#include <vector>
#include <climits>
#include <queue>

using namespace std;

// Dijkstra's algorithm to find the shortest path
int findDistance(vector<vector<int>>& distances, int from, int to) {
    int n = distances.size();
    vector<int> dist(n, INT_MAX);  // Store minimum distance for each node
    dist[from] = 0;  // The starting point has a distance of 0
    vector<bool> visited(n, false);  // Keep track of visited nodes
    
    // Min-heap priority queue to pick the node with the smallest distance
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, from});  // Start from the 'from' node
    
    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        
        if (visited[u]) continue;
        visited[u] = true;
        
        for (int v = 0; v < n; ++v) {
            if (distances[u][v] != 0 && !visited[v] && dist[u] != INT_MAX) {
                int newDist = dist[u] + distances[u][v];
                if (newDist < dist[v]) {
                    dist[v] = newDist;
                    pq.push({dist[v], v});
                }
            }
        }
    }

    return dist[to] == INT_MAX ? -1 : dist[to] / 3;  // If no path found, return -1
}

int main() {
    // Adjacency matrix representing road distances
    vector<vector<int>> distances = {
        {0, 20, 4, 15, 0, 0}, // P1 (B)
        {20, 0, 12, 0, 8, 0}, // P2
        {4, 12, 0, 15, 0, 7}, // P3
        {15, 0, 15, 0, 0, 0}, // P4
        {0, 8, 0, 0, 0, 0}, // P5 (V)
        {0, 0, 7, 0, 0, 0} // P6
    };

    int v = 4;  // Destination node (P5 or V)
    int b = 0;  // Starting node (P1 or B)
    
    int distance = findDistance(distances, b, v);
    if (distance != -1) {
        cout << "Shortest distance from B to V: " << distance << endl;
    } else {
        cout << "No path found from B to V." << endl;
    }

    return 0;
}
